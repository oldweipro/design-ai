name: Release

on:
  push:
    tags:
      - 'v*'  # 触发条件：推送以 v 开头的标签 (如 v1.0.0)

permissions:
  contents: write  # 需要写权限来创建 release

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'  # 根据你的项目需要调整 Go 版本

      - name: Run tests
        run: go test -v ./...

      - name: Build for multiple platforms
        run: |
          # Linux AMD64
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/myapp-linux-amd64
          
          # Linux ARM64
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o dist/myapp-linux-arm64
          
          # Windows AMD64
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/myapp-windows-amd64.exe
          
          # macOS AMD64
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/myapp-darwin-amd64
          
          # macOS ARM64 (Apple Silicon)
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/myapp-darwin-arm64

      - name: Create archives
        run: |
          cd dist
          
          # 创建 tar.gz 归档文件
          tar -czf myapp-linux-amd64.tar.gz myapp-linux-amd64
          tar -czf myapp-linux-arm64.tar.gz myapp-linux-arm64
          tar -czf myapp-darwin-amd64.tar.gz myapp-darwin-amd64
          tar -czf myapp-darwin-arm64.tar.gz myapp-darwin-arm64
          
          # 创建 zip 归档文件
          zip myapp-windows-amd64.zip myapp-windows-amd64.exe

      - name: Generate changelog
        id: changelog
        run: |
          # 获取上一个标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          # 生成变更日志
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > changelog.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> changelog.md
          else
            echo "## Initial Release" > changelog.md
            git log --pretty=format:"- %s (%h)" >> changelog.md
          fi
          
          # 设置输出变量
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            dist/myapp-*.tar.gz
            dist/myapp-*.zip
          draft: false
          prerelease: false
          generate_release_notes: true  # GitHub 自动生成发布说明
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 可选：发布到 Docker Hub
  docker:
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            your-dockerhub-username/myapp:${{ steps.tag.outputs.tag }}
            your-dockerhub-username/myapp:latest