name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write

jobs:
  # 构建多平台二进制文件
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          # 设置二进制文件名
          BINARY_NAME="design-ai"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          # 设置输出目录
          OUTPUT_DIR="dist/${GOOS}-${GOARCH}"
          mkdir -p $OUTPUT_DIR
          
          # 构建二进制文件
          CGO_ENABLED=0 go build \
            -ldflags="-w -s -X main.version=${{ steps.version.outputs.VERSION }}" \
            -o "${OUTPUT_DIR}/${BINARY_NAME}" \
            .
          
          # 创建压缩包
          cd dist
          if [ "$GOOS" = "windows" ]; then
            zip -r "design-ai-${{ steps.version.outputs.VERSION }}-${GOOS}-${GOARCH}.zip" "${GOOS}-${GOARCH}/"
          else
            tar -czf "design-ai-${{ steps.version.outputs.VERSION }}-${GOOS}-${GOARCH}.tar.gz" "${GOOS}-${GOARCH}/"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*.{tar.gz,zip}
          retention-days: 1

  # 构建和推送Docker镜像
  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD

      - name: Extract metadata for GitHub Container Registry
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Extract metadata for Docker Hub
        id: meta-hub
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/design-ai
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
        if: secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD

      - name: Build and push to GitHub Container Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-ghcr.outputs.tags }}
          labels: ${{ steps.meta-ghcr.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            BUILD_TIME=${{ fromJSON(steps.meta-ghcr.outputs.json).labels['org.opencontainers.image.created'] }}

      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-hub.outputs.tags }}
          labels: ${{ steps.meta-hub.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            BUILD_TIME=${{ fromJSON(steps.meta-hub.outputs.json).labels['org.opencontainers.image.created'] }}
        if: secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD

  # 创建GitHub Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Generate changelog
        id: changelog
        run: |
          # 获取上一个tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "CHANGELOG=首次发布" >> $GITHUB_OUTPUT
          else
            # 生成变更日志
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## 🚀 Design AI ${{ steps.version.outputs.VERSION }}
            
            ### 📦 下载
            
            选择适合你系统的二进制文件：
            - **Linux (x64)**: design-ai-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz
            - **Linux (ARM64)**: design-ai-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz
            - **macOS (Intel)**: design-ai-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz
            - **macOS (Apple Silicon)**: design-ai-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz
            - **Windows (x64)**: design-ai-${{ steps.version.outputs.VERSION }}-windows-amd64.zip
            
            ### 🐳 Docker镜像
            
            ```bash
            # 从GitHub容器注册表拉取
            docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
            
            # 或从Docker Hub拉取（如果配置了）
            # docker pull your-dockerhub-username/design-ai:${{ steps.version.outputs.VERSION }}
            ```
            
            ### 📋 变更日志
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### 🔧 安装说明
            
            #### 二进制安装
            1. 下载对应平台的压缩包
            2. 解压到目标目录
            3. 运行 `./design-ai` (Linux/macOS) 或 `design-ai.exe` (Windows)
            
            #### Docker运行
            ```bash
            docker run -d \
              --name design-ai \
              -p 8080:8080 \
              -v $(pwd)/data:/app/data \
              ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
            ```
            
            访问 http://localhost:8080 开始使用！
          files: artifacts/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}