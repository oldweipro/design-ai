name: Release

on:
  push:
    tags:
      - 'v*'  # 匹配 v1.0.0, v2.1.3 等标签

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APP_NAME: design-ai
  GO_VERSION: '1.23'

permissions:
  contents: write
  packages: write

jobs:
  # 预处理：验证和准备
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      clean_version: ${{ steps.version.outputs.CLEAN_VERSION }}
      is_prerelease: ${{ steps.version.outputs.IS_PRERELEASE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version info
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          CLEAN_VERSION=${VERSION#v}
          
          # 检查是否为预发布版本（包含 alpha, beta, rc 等）
          if [[ $VERSION =~ (alpha|beta|rc|dev|pre) ]]; then
            IS_PRERELEASE=true
          else
            IS_PRERELEASE=false
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "CLEAN_VERSION=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "📋 Release Info:"
          echo "  Version: $VERSION"
          echo "  Clean Version: $CLEAN_VERSION"
          echo "  Is Prerelease: $IS_PRERELEASE"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

  # 构建多平台二进制文件
  build-binaries:
    name: Build ${{ matrix.goos }}/${{ matrix.goarch }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: freebsd
            goarch: amd64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          echo "🔨 Building for $GOOS/$GOARCH..."
          
          # 设置二进制文件名
          BINARY_NAME="${{ env.APP_NAME }}"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          # 设置输出目录
          OUTPUT_DIR="dist/${GOOS}-${GOARCH}"
          mkdir -p "$OUTPUT_DIR"
          
          # 构建参数
          BUILD_FLAGS=(
            -trimpath
            -ldflags="-w -s -X main.version=${{ needs.prepare.outputs.version }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=${GITHUB_SHA:0:8}"
          )
          
          # 构建二进制文件
          go build "${BUILD_FLAGS[@]}" -o "${OUTPUT_DIR}/${BINARY_NAME}" .
          
          # 验证构建结果
          ls -la "${OUTPUT_DIR}/"
          
          # 为 Unix 系统设置可执行权限
          if [ "$GOOS" != "windows" ]; then
            chmod +x "${OUTPUT_DIR}/${BINARY_NAME}"
          fi

      - name: Create archive
        run: |
          cd dist
          ARCHIVE_NAME="${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          
          if [ "${{ matrix.goos }}" = "windows" ]; then
            # Windows 使用 ZIP
            zip -r "${ARCHIVE_NAME}.zip" "${{ matrix.goos }}-${{ matrix.goarch }}/"
            echo "📦 Created: ${ARCHIVE_NAME}.zip"
          else
            # Unix 系统使用 tar.gz
            tar -czf "${ARCHIVE_NAME}.tar.gz" "${{ matrix.goos }}-${{ matrix.goarch }}/"
            echo "📦 Created: ${ARCHIVE_NAME}.tar.gz"
          fi

      - name: Generate checksums
        run: |
          cd dist
          for file in *.{tar.gz,zip}; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> checksums.txt
              echo "✅ Checksum generated for $file"
            fi
          done 2>/dev/null || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt
          retention-days: 7

  # 构建和推送 Docker 镜像
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [prepare, build-binaries]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Docker Hub credentials
        id: docker_check
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "docker_hub_available=true" >> $GITHUB_OUTPUT
            echo "docker_image=${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}" >> $GITHUB_OUTPUT
          else
            echo "docker_hub_available=false" >> $GITHUB_OUTPUT
            echo "docker_image=" >> $GITHUB_OUTPUT
          fi

      - name: Login to Docker Hub
        if: steps.docker_check.outputs.docker_hub_available == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get current time
        id: time
        run: echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ steps.docker_check.outputs.docker_image }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ env.APP_NAME }}
            org.opencontainers.image.description=AI-powered design tool
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ needs.prepare.outputs.version }}
            org.opencontainers.image.created=${{ steps.time.outputs.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
            BUILD_TIME=${{ steps.time.outputs.timestamp }}
            GIT_COMMIT=${{ github.sha }}

  # 创建 GitHub Release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, build-binaries, build-docker]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Check Docker Hub configuration
        id: docker_info
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "docker_configured=true" >> $GITHUB_OUTPUT
            echo "docker_pull_cmd=docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ needs.prepare.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "docker_configured=false" >> $GITHUB_OUTPUT
            echo "docker_pull_cmd=# Docker Hub 未配置，请使用 GitHub Container Registry" >> $GITHUB_OUTPUT
          fi

      - name: Merge checksums
        run: |
          echo "📋 Merging checksums..."
          find artifacts -name "checksums.txt" -exec cat {} \; | sort > final_checksums.txt
          echo "✅ Final checksums:"
          cat final_checksums.txt

      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 Generating changelog..."
          
          # 获取上一个 tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG="🎉 首次发布"
          else
            echo "📊 Changes since $PREVIOUS_TAG:"
          
            # 分类生成变更日志
            FEATURES=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --grep="feat:" --grep="feature:" --no-merges | head -10)
            FIXES=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --grep="fix:" --grep="bug:" --no-merges | head -10)
            OTHERS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges --invert-grep --grep="feat:" --grep="feature:" --grep="fix:" --grep="bug:" | head -10)
          
            CHANGELOG=""
            [ -n "$FEATURES" ] && CHANGELOG="${CHANGELOG}### 🚀 新功能\n${FEATURES}\n\n"
            [ -n "$FIXES" ] && CHANGELOG="${CHANGELOG}### 🐛 问题修复\n${FIXES}\n\n"
            [ -n "$OTHERS" ] && CHANGELOG="${CHANGELOG}### 🔧 其他更改\n${OTHERS}\n\n"
          
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="### 📋 更改列表\n$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:'- %s (%h)' --no-merges | head -10)"
            fi
          fi
          
          # 使用 EOF 处理多行输出
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          name: "🚀 ${{ env.APP_NAME }} ${{ needs.prepare.outputs.version }}"
          prerelease: ${{ needs.prepare.outputs.is_prerelease }}
          make_latest: ${{ needs.prepare.outputs.is_prerelease == 'false' }}
          body: |
            ## 📦 下载说明
            
            > **提示**: 下载后请验证文件校验和以确保完整性
            
            ### 📱 平台支持
            
            | 平台 | 架构 | 下载链接 |
            |------|------|----------|
            | 🐧 Linux | x64 | [${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-linux-amd64.tar.gz](../../releases/download/${{ needs.prepare.outputs.version }}/${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-linux-amd64.tar.gz) |
            | 🐧 Linux | ARM64 | [${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-linux-arm64.tar.gz](../../releases/download/${{ needs.prepare.outputs.version }}/${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-linux-arm64.tar.gz) |
            | 🍎 macOS | Intel | [${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-darwin-amd64.tar.gz](../../releases/download/${{ needs.prepare.outputs.version }}/${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-darwin-amd64.tar.gz) |
            | 🍎 macOS | Apple Silicon | [${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-darwin-arm64.tar.gz](../../releases/download/${{ needs.prepare.outputs.version }}/${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-darwin-arm64.tar.gz) |
            | 🪟 Windows | x64 | [${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-windows-amd64.zip](../../releases/download/${{ needs.prepare.outputs.version }}/${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-windows-amd64.zip) |
            | 🐧 FreeBSD | x64 | [${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-freebsd-amd64.tar.gz](../../releases/download/${{ needs.prepare.outputs.version }}/${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-freebsd-amd64.tar.gz) |
            
            ### 🐳 Docker 镜像
            
            ```bash
            # 从 GitHub Container Registry
            docker pull ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.version }}
            
            # 从 Docker Hub (如果已配置)
            ${{ steps.docker_info.outputs.docker_pull_cmd }}
            
            # 运行容器
            docker run -d \
              --name ${{ env.APP_NAME }} \
              -p 8080:8080 \
              -v $(pwd)/data:/app/data \
              ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.version }}
            ```
            
            ### 📋 更新日志
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### 🛠️ 安装指南
            
            #### 二进制安装
            ```bash
            # 1. 下载对应平台的压缩包
            # 2. 解压文件
            tar -xzf ${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-linux-amd64.tar.gz  # Linux/macOS
            # 或
            unzip ${{ env.APP_NAME }}-${{ needs.prepare.outputs.version }}-windows-amd64.zip     # Windows
            
            # 3. 运行程序
            ./linux-amd64/${{ env.APP_NAME }}  # Linux/macOS
            # 或
            .\windows-amd64\${{ env.APP_NAME }}.exe  # Windows
            ```
            
            #### 使用包管理器 (推荐)
            ```bash
            # Homebrew (macOS/Linux)
            brew install ${{ github.repository_owner }}/${{ env.APP_NAME }}
            
            # Snap (Linux)
            sudo snap install ${{ env.APP_NAME }}
            
            # Chocolatey (Windows)
            choco install ${{ env.APP_NAME }}
            ```
            
            ### 🔍 校验文件完整性
            ```bash
            # 下载校验和文件
            curl -LO https://github.com/${{ github.repository }}/releases/download/${{ needs.prepare.outputs.version }}/checksums.txt
            
            # 验证文件
            sha256sum -c checksums.txt
            ```
            
            ### 🆘 获取帮助
            
            - 📖 [用户文档](../../wiki)
            - 🐛 [报告问题](../../issues/new)
            - 💬 [讨论区](../../discussions)
            - 📧 联系我们: [support@example.com](mailto:support@example.com)
            
            ---
            
            **完整更新日志**: [`${{ needs.prepare.outputs.version }}`](../../compare/${{ needs.prepare.outputs.version }})
          files: |
            artifacts/*
            final_checksums.txt
          fail_on_unmatched_files: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 可选：通知构建完成
  notify:
    name: Post-release Notifications
    runs-on: ubuntu-latest
    needs: [prepare, release]
    if: always()
    steps:
      - name: Notify Success
        if: needs.release.result == 'success'
        run: |
          echo "🎉 Release ${{ needs.prepare.outputs.version }} created successfully!"
          echo "📦 Assets uploaded and Docker images pushed"
          echo "🔗 https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare.outputs.version }}"

      - name: Notify Failure
        if: needs.release.result == 'failure'
        run: |
          echo "❌ Release ${{ needs.prepare.outputs.version }} failed!"
          echo "🔍 Check the workflow logs for details"
          exit 1